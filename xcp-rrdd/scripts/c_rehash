#!/usr/bin/python

# Python c_rehash script, scan all files in a directory
# and add symbolic links to their hash values.

# Derived from the perl implementation in openssl


'''/* ====================================================================
 * Copyright (c) 1998-2004 The OpenSSL Project.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer. 
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit. (http://www.openssl.org/)"
 *
 * 4. The names "OpenSSL Toolkit" and "OpenSSL Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    openssl-core@openssl.org.
 *
 * 5. Products derived from this software may not be called "OpenSSL"
 *    nor may "OpenSSL" appear in their names without prior written
 *    permission of the OpenSSL Project.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *    "This product includes software developed by the OpenSSL Project
 *    for use in the OpenSSL Toolkit (http://www.openssl.org/)"
 *
 * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * ====================================================================
 *
 * This product includes cryptographic software written by Eric Young
 * (eay@cryptsoft.com).  This product includes software written by Tim
 * Hudson (tjh@cryptsoft.com).
 *
 */

 Original SSLeay License
 -----------------------

/* Copyright (C) 1995-1998 Eric Young (eay@cryptsoft.com)
 * All rights reserved.
 *
 * This package is an SSL implementation written
 * by Eric Young (eay@cryptsoft.com).
 * The implementation was written so as to conform with Netscapes SSL.
 * 
 * This library is free for commercial and non-commercial use as long as
 * the following conditions are aheared to.  The following conditions
 * apply to all code found in this distribution, be it the RC4, RSA,
 * lhash, DES, etc., code; not just the SSL code.  The SSL documentation
 * included with this distribution is covered by the same copyright terms
 * except that the holder is Tim Hudson (tjh@cryptsoft.com).
 * 
 * Copyright remains Eric Young's, and as such any Copyright notices in
 * the code are not to be removed.
 * If this package is used in a product, Eric Young should be given attribution
 * as the author of the parts of the library used.
 * This can be in the form of a textual message at program startup or
 * in documentation (online or textual) provided with the package.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *    "This product includes cryptographic software written by
 *     Eric Young (eay@cryptsoft.com)"
 *    The word 'cryptographic' can be left out if the rouines from the library
 *    being used are not cryptographic related :-).
 * 4. If you include any Windows specific code (or a derivative thereof) from 
 *    the apps directory (application code) you must include an acknowledgement:
 *    "This product includes software written by Tim Hudson (tjh@cryptsoft.com)"
 * 
 * THIS SOFTWARE IS PROVIDED BY ERIC YOUNG ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * 
 * The licence and distribution terms for any publically available version or
 * derivative of this code cannot be changed.  i.e. this code cannot simply be
 * copied and put under another distribution licence
 * [including the GNU Public Licence.]
 */'''


import os
import re
import subprocess
import sys


def hash_dir(d):
    #print "Doing %s" % d
    os.chdir(d)
    # Delete any existing symbolic links
    for subdir in os.listdir(d):
        if re.search(r'^[\da-f]+\.r{0,1}\d+$', subdir) and os.path.islink(subdir):
            os.unlink(subdir)
    for fname in [s for s in os.listdir(d) if s.endswith('.pem')]:
        # Check to see if certificates and/or CRLs present
        (cert, crl) = check_file(fname)
        if not cert and not crl:
            #print >>sys.stderr, "WARNING: %s does not contain a certificate or CRL: skipping" % fname
            continue
        if cert: link_hash_cert(fname)
        if crl: link_hash_crl(fname)

def check_file(fname):
    is_cert = False
    is_crl = False
    IN = open(fname)
    for line in IN:
        match = re.search(r'^-----BEGIN (.*)-----', line)
        if match:
            hdr = match.group(1)
            if re.search(r'^(X509 |TRUSTED |)CERTIFICATE$', hdr):
                is_cert = True
                if is_crl: break
            elif hdr == 'X509 CRL':
                is_crl = True
                if is_cert: break
    IN.close()
    return (is_cert, is_crl)

# Link a certificate to its subject name hash value, each hash is of
# the form <hash>.<n> where n is an integer. If the hash value already exists
# then we need to up the value of n, unless it's a duplicate in which
# case we skip the link. We check for duplicates by comparing the
# certificate fingerprints

def link_hash_cert(fname):
    pipe = subprocess.Popen([openssl, 'x509', '-hash', '-fingerprint', '-noout', '-in', fname],
                            stdout = subprocess.PIPE)
    hash = pipe.stdout.readline().rstrip('\n')
    fprint = pipe.stdout.readline().rstrip('\n')
    pipe.wait()
    fprint = fprint[fprint.index('=')+1:].replace(':', '')
    suffix = 0
    # Search for an unused hash filename
    key = "%s.%d" % (hash, suffix)
    while hashlist.has_key(key):
        # Hash matches: if fingerprint matches it's a duplicate cert
        if hashlist.has_key(key) == fprint:
            #print >>sys.stderr, "WARNING: Skipping duplicate certificate %s" % fname
            return
        suffix += 1
        key = "%s.%d" % (hash, suffix)
    hash = key
    #print "%s => %s" % (fname, hash)
    # FIXME: expects a *nix platform
    os.symlink(fname, hash)
    hashlist[hash] = fprint

# Same as above except for a CRL. CRL links are of the form <hash>.r<n>

def link_hash_crl(fname):
    pipe = subprocess.Popen([openssl, 'crl', '-hash', '-fingerprint', '-noout', '-in', fname],
                            stdout = subprocess.PIPE)
    hash = pipe.stdout.readline().rstrip('\n')
    fprint = pipe.stdout.readline().rstrip('\n')
    pipe.wait()
    fprint = fprint[fprint.index('=')+1:].replace(':', '')
    suffix = 0
    # Search for an unused hash filename
    key = "%s.r%d" % (hash, suffix)
    while hashlist.has_key(key):
        # Hash matches: if fingerprint matches it's a duplicate cert
        if hashlist.has_key(key) == fprint:
            #print >>sys.stderr, "WARNING: Skipping duplicate CRL %s" % fname
            return
        suffix += 1
        key = "%s.r%d" % (hash, suffix)
    hash = key
    #print "%s => %s" % (fname, hash)
    # FIXME: expects a *nix platform
    os.symlink(fname, hash)
    hashlist[hash] = fprint


if __name__ == "__main__":
    hashlist = {}
    openssl = None

    dir = '/etc/pki/tls'
    
    if os.environ.has_key('OPENSSL'):
        openssl = os.environ['OPENSSL']
    else:
        openssl = 'openssl'
        os.environ['OPENSSL'] = openssl

    os.environ['PATH'] += ':' + os.path.join(dir, 'bin')

    # FIXME: access() checks as real user rather than effective user
    if not os.access(openssl, os.X_OK):
        found = False
        for d in os.environ['PATH'].split(':'):
            if os.access(os.path.join(d, openssl), os.X_OK):
                found = True
                break
        if not found:
            #print >>sys.stderr, "c_rehash: rehashing skipped ('openssl' program not available)"
            sys.exit(0)

    if len(sys.argv) > 1:
        dirlist = sys.argv[1:]
    elif os.environ.has_key('SSL_CERT_DIR'):
        dirlist = os.environ['SSL_CERT_DIR'].split(':')
    else:
        dirlist = [os.path.join(dir, 'certs')]

    for d in dirlist:
        if os.path.isdir(d) and os.access(d, os.W_OK):
            hash_dir(d)
