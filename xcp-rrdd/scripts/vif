#!/bin/sh

# Copyright (C) 2008,2009 Citrix Systems, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation; version 2.1 only. with the special
# exception on linking described in file LICENSE.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

# CA-23900: Warning: when VIFs are added to windows guests with PV drivers the backend vif device is registered,
# unregistered and then registered again. This causes the udev event to fire twice and this script runs twice.
# Since the first invocation of the script races with the device unregistration, spurious errors are possible
# which will be logged but are safe to ignore since the second script invocation should complete the operation.
# Note that each script invocation is run synchronously from udev and so the scripts don't race with each other.

# Keep other-config/ keys in sync with device.ml:vif_udev_keys

BRCTL="/usr/sbin/brctl"
IP="/sbin/ip"

cfg_mod="/usr/bin/ovs-cfg-mod"
vsctl="/usr/bin/ovs-vsctl"
service="/sbin/service"

handle_promiscuous()
{
    local arg=$(xenstore-read "${PRIVATE}/other-config/promiscuous" 2>/dev/null)
    if [ $? -eq 0 -a -n "${arg}" ] ; then
	case $NETWORK_MODE in
	    bridge)
		case "${arg}" in 
		    true|on) echo 1 > /sys/class/net/${dev}/brport/promisc ;;
		    *) echo 0 > /sys/class/net/${dev}/brport/promisc ;;
		esac
		;;
	    vswitch)
		logger -t script-vif "${dev}: Promiscuous ports are not supported via vSwitch."
		;;
	esac
    fi
}

handle_ethtool()
{
    local opt=$1
    local arg=$(xenstore-read "${PRIVATE}/other-config/ethtool-${opt}" 2>/dev/null)
    if [ $? -eq 0 -a -n "${arg}" ] ; then
        case "${arg}" in
            true|on)   /sbin/ethtool -K "${dev}" "${opt}" on ;;
            false|off) /sbin/ethtool -K "${dev}" "${opt}" off ;;
            *) logger -t scripts-vif "Unknown ethtool argument ${opt}=${arg} on ${dev}/${VIFUUID}" ;;
        esac
    fi
}

handle_mtu()
{
    local mtu=$(xenstore-read "${PRIVATE}/MTU" 2>/dev/null)
    if [ $? -eq 0 -a -n "${mtu}" ]; then
	echo "${mtu}" > /sys/class/net/${dev}/mtu
    fi
}

handle_vswitch_vif_details()
{
    local vif_details=
    local net_uuid=$(xenstore-read "${PRIVATE}/network-uuid" 2>/dev/null)
    if [ -n "${net_uuid}" ] ; then
	vif_details="$vif_details --add=port.${dev}.net-uuid=${net_uuid}"
    fi

    local address=$(xenstore-read "/local/domain/$DOMID/device/vif/$DEVID/mac" 2>/dev/null)
    if [ -n "${address}" ] ; then
	vif_details="$vif_details --add=port.${dev}.vif-mac=${address}"
    fi

    local vif_uuid=$(xenstore-read "${PRIVATE}/vif-uuid" 2>/dev/null)
    if [ -n "${vif_uuid}" ] ; then
	vif_details="$vif_details --add=port.${dev}.vif-uuid=${vif_uuid}"
    fi

    local vm=$(xenstore-read "/local/domain/$DOMID/vm" 2>/dev/null)
    if [ $? -eq 0 -a -n "${vm}" ] ; then
	local vm_uuid=$(xenstore-read "$vm/uuid" 2>/dev/null)
    fi
    if [ -n "${vm_uuid}" ] ; then
	vif_details="$vif_details --add=port.${dev}.vm-uuid=${vm_uuid}"
    fi
    echo ${vif_details}
}

add_to_bridge()
{
    local address=$(xenstore-read "${PRIVATE}/bridge-MAC")
    if [ $? -ne 0 -o -z "${address}" ]; then
	logger -t scripts-vif "Failed to read ${PRIVATE}/bridge-MAC from xenstore"
	exit 1
    fi
    local bridge=$(xenstore-read "${PRIVATE}/bridge")
    if [ $? -ne 0 -o -z "${bridge}" ]; then
	logger -t scripts-vif "Failed to read ${PRIVATE}/bridge from xenstore"
	exit 1
    fi
    logger -t scripts-vif "Adding ${dev} to ${bridge} with address ${address}"

    ${IP} link set "${dev}" down                        || logger -t scripts-vif "Failed to ip link set ${dev} down"
    ${IP} link set "${dev}" arp off                     || logger -t scripts-vif "Failed to ip link set ${dev} arp off"
    ${IP} link set "${dev}" multicast off               || logger -t scripts-vif "Failed to ip link set ${dev} multicast off"
    ${IP} link set "${dev}" address "${address}"        || logger -t scripts-vif "Failed to ip link set ${dev} address ${address}"
    ${IP} addr flush "${dev}"                           || logger -t scripts-vif "Failed to ip addr flush ${dev}"

    case $NETWORK_MODE in
	bridge)
	    ${BRCTL} setfd "${bridge}" 0                        || logger -t scripts-vif "Failed to brctl setfd ${bridge} 0"
	    ${BRCTL} addif "${bridge}" "${dev}"                 || logger -t scripts-vif "Failed to brctl addif ${bridge} ${dev}"
	    ;;
	vswitch)
	    local VLAN_ID=$($vsctl br-to-vlan $bridge)
	    local vid=
	    if [ "$VLAN_ID" -ne 0 ] ; then
		bridge=$($vsctl br-to-parent $bridge)
		vid="--add=vlan.${dev}.tag=${VLAN_ID}"
	    fi

	    if [ "$TYPE" = "vif" ] ; then
		local vif_details=$(handle_vswitch_vif_details)
	    fi

	    $cfg_mod -F /etc/ovs-vswitchd.conf \
		--del-match="bridge.*.port=${dev}" \
		--del-match="vlan.${dev}.[!0-9]*" \
		--del-match="port.${dev}.[!0-9]*" \
		--add="bridge.$bridge.port=${dev}" \
		$vid $vif_details -c 
	    $service vswitch reload
	    ;;
    esac
	    
    ${IP} link set "${dev}" up                          || logger -t scripts-vif "Failed to ip link set ${dev} up"
}

remove_from_bridge()
{
    case $NETWORK_MODE in
	bridge)
	    # Nothing to do
	    ;;
	vswitch)
	    $cfg_mod -vANY:console:emer -F /etc/ovs-vswitchd.conf \
		--del-match="bridge.*.port=${dev}" \
		--del-match="vlan.${dev}.[!0-9]*" \
		--del-match="port.${dev}.[!0-9]*" -c
	    $service vswitch reload
	    ;;
    esac
}

NETWORK_MODE=$(cat /etc/xensource/network.conf)
ACTION=$1
TYPE=$2

case $NETWORK_MODE in
    bridge|vswitch) ;;
    *)
	logger -t scripts-vif "Unknown network mode $NETWORK_MODE"
	exit 1
	;;
esac

case ${TYPE} in
    vif)
	DOMID=`echo ${XENBUS_PATH} | cut -f 3 -d '/'`
	DEVID=`echo ${XENBUS_PATH} | cut -f 4 -d '/'`
	dev=vif${DOMID}.${DEVID}
	;;
    tap)
	dev=$INTERFACE
	DOMID=`echo ${dev#tap} | cut -f 1 -d '.'`
	DEVID=`echo ${dev#tap} | cut -f 2 -d '.'`
	;;
    *)  
	logger -t scripts-vif "unknown interface type ${TYPE}"
	exit 1
	;;
esac

XAPI=/xapi/${DOMID}/hotplug/vif/${DEVID}
HOTPLUG=/xapi/${DOMID}/hotplug/vif/${DEVID}
PRIVATE=/xapi/${DOMID}/private/vif/${DEVID}

logger -t scripts-vif "Called as \"$@\" domid:$DOMID devid:$DEVID mode:$NETWORK_MODE"
case "${ACTION}" in
online)
	if [ "${TYPE}" = "vif" ] ; then
	    handle_ethtool rx
	    handle_ethtool tx
	    handle_ethtool sg
	    handle_ethtool tso
	    handle_ethtool ufo
	    handle_ethtool gso

	    handle_mtu
	    add_to_bridge
	    handle_promiscuous

	    xenstore-write "${HOTPLUG}/vif" "${dev}"
	    xenstore-write "${HOTPLUG}/hotplug" "online"

	    # xs-xen.pq.hq:91e986b8e49f netback-wait-for-hotplug
	    xenstore-write "/local/domain/0/backend/vif/${DOMID}/${DEVID}/hotplug-status" "connected"
	fi
	;;

add)
	if [ "${TYPE}" = "tap" ] ; then
	    add_to_bridge
	fi
	;;

remove)
	if [ "${TYPE}" = "vif" ] ;then
	    xenstore-rm "${HOTPLUG}/hotplug"
	fi
	logger -t scripts-vif "${dev} has been removed"
	remove_from_bridge
	;;
esac
