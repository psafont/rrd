IPROG=install -m 755 -o root -g root
IDATA=install -m 644 -o root -g root

XEN_COMPILE_ARCH = $(shell uname -m | sed -e"s/i.86/x86_32/g")

if $(equal $(XEN_COMPILE_ARCH), x86_32)
  LIBDIR = lib
  export
else
  LIBDIR = lib64
  export

# Default to bytecode unless COMPILE_NATIVE is defined
if $(not $(defined-env COMPILE_NATIVE))
  COMPILE_NATIVE = yes
  export
BYTE_ENABLED = false
NATIVE_ENABLED = $(if $(equal $(COMPILE_NATIVE), yes), true, false)

if $(not $(defined-env CARBON_DISTFILES))
  CARBON_DISTFILES = /usr/groups/linux/distfiles
  export

USE_OCAMLFIND = true

OCAMLFLAGS = -g -dtypes -thread -warn-error F
OCAMLPACKS = threads bigarray

# c compiling stuff
OCAMLCFLAGS += -g
OCAMLOPTFLAGS = -ccopt -fPIC
CFLAGS+=-g -O2
if $(defined-env COMPILE_NATIVE)
  CFLAGS+=-DCOMPILE_NATIVE
  export

LDFLAGS+=-static

if $(not $(defined-env XEN_ROOT))
  XEN_ROOT =
  export

XEN_CFLAGS=-I$(XEN_ROOT)/usr/include
XEN_OCAML_LINK_FLAGS=-cclib -L$(XEN_ROOT)/usr/$(LIBDIR)
XEN_OCAML_CLIBS=

# For the Zurich chroot environment
CFLAGS+=-I$(shell ocamlc -where)

DIST=$(ROOT)/dist
SDK=$(ROOT)/dist/staging/SDK
SDKWWW=$(ROOT)/dist/staging/SDKwww
DEBUGDIST=$(DIST)/staging/opt/xensource/debug
LIBEXEC=$(DIST)/staging/opt/xensource/libexec

CLEAN_OBJS = *.cmi *.cmo *.cmx *.cma *.cmxa *.annot *.run *.opt *.o *.a
export CLEAN_OBJS

.PHONY: clean
clean:
	rm -rf doc/

.SUBDIRS: ocaml scripts


if $(not $(defined-env COMPILE_OCAML))
  COMPILE_OCAML = yes
  export
if $(not $(defined-env COMPILE_JS))
  COMPILE_JS = yes
  export

# inherits COMPILE_XENSTUFF from the Makefile (NB don't set it here or else
# you can't build the fakeserver etc on a machine without Xen, e.g. an Apple)
if $(not $(defined-env COMPILE_XENSTUFF))
  COMPILE_XENSTUFF = no
  export

.PHONY: none

# Ocaml #############################################################################
OCAML_PHASE1= copy_quicktest_modules
OCAML_PHASE2= autogen_idl

# JS ################################################################################
JS_PHASE1=
JS_PHASE2=js_binding
JS_PHASE3=

JS_PHASE1_TARGETS = $(if $(equal $(COMPILE_JS), yes), $(JS_PHASE1), none)
JS_PHASE2_TARGETS = $(if $(equal $(COMPILE_JS), yes), $(JS_PHASE2), none)
JS_PHASE3_TARGETS = $(if $(equal $(COMPILE_JS), yes), $(JS_PHASE3), none)

# Phase 3 targets divided into two depending on whether we're building the Xen stuff or not:
OCAML_PHASE3_XEN = \
	ocaml/xapi/xapi \
	ocaml/xenstored/xenstored \
	ocaml/xstest/xstest \
	ocaml/xstest/xsbench \
	ocaml/xstest/xscheckperms \
	allxenops \
	ocaml/xenops-ts/runtest \
	ocaml/xenguest/xenguest \
	ocaml/xenguest/dumpcore \
	ocaml/xapi/fakeguestagent \
	ocaml/xsrpc/xsrpc \
	ocaml/xsrpc/xsrpcd-util \
	ocaml/guest/agent \
	ocaml/netdev/brctl \
	ocaml/p2v/p2v \
	ocaml/v6/v6testd \
	ocaml/v6/v6d-reopen-logs

OCAML_PHASE3_NOXEN = \
	ocaml/auth/testauthx \
	ocaml/xe-cli/xe \
	ocaml/xsh/xsh \
	ocaml/xe-cli/rt/test_host \
	ocaml/xe-cli/rt/gtclient \
	ocaml/xe-cli/rt/gtserver_linux \
	ocaml/xe-cli/rt/xgetip \
	ocaml/xe-cli/rt/geneva/cli_test \
	ocaml/xe-cli/rt/geneva/sm_stress \
	ocaml/util/unix-domain-wrapper \
	ocaml/util/xmlpp \
	ocaml/events/event_listen \
	ocaml/muxdemux/tar \
	ocaml/console/console \
	ocaml/graph/graph \
	ocaml/rfb/rfb_randomtest \
	ocaml/database/unit_test_marshall \
	ocaml/database/block_device_io \
	ocaml/fdhelper/closeandexec \
	ocaml/fdhelper/closeandexec_static \
	ocaml/toplevel \
	ocaml/xiu/xiu \
	ocaml/cdrommon/cdrommon \
	ocaml/xapi/stresstest \
	ocaml/xapi/fakeguestagent \
	ocaml/xapi/quicktestbin \
	ocaml/xapi/binpack \
	ocaml/idl/datamodel \
	ocaml/idl/html_build \
	ocaml/db_process/xapi-db-process \
	ocaml/vncproxy/vncproxy \
	ocaml/xapi/rrddump \
	ocaml/perftest/perftest \
	ocaml/perftest/histogram \
	ocaml/perftest/cumulative_time \
	ocaml/lvhdrt/lvhdrt \
	ocaml/mpathalert/mpathalert \
	ocaml/multipathrt/multipathrt


OCAML_PHASE3 = $(if $(equal $(COMPILE_XENSTUFF), yes), $(OCAML_PHASE3_XEN) $(OCAML_PHASE3_NOXEN), $(OCAML_PHASE3_NOXEN))

OCAML_PHASE1_TARGETS = $(if $(equal $(COMPILE_OCAML), yes), $(OCAML_PHASE1), none)
OCAML_PHASE2_TARGETS = $(if $(equal $(COMPILE_OCAML), yes), $(OCAML_PHASE2), none)
OCAML_PHASE3_TARGETS = $(if $(equal $(COMPILE_OCAML), yes), $(OCAML_PHASE3), none)

#####################################################################################

# phase1: build stdlib2
.PHONY: phase1
phase1: $(OCAML_PHASE1_TARGETS) $(JS_PHASE1_TARGETS)
	mkdir -p $(DIST) $(DIST)/bin

# phase2: build compilers and make autogenerated files
.PHONY: phase2
phase2: $(OCAML_PHASE2_TARGETS) $(JS_PHASE2_TARGETS)

# phase3: use autogenerated files to make apps
.PHONY: phase3
phase3: $(OCAML_PHASE3_TARGETS) $(JS_PHASE3_TARGETS)

